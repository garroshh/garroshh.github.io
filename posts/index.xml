<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - LoveIt</title><link>https://garroshh.me/posts/</link><description>所有文章 | LoveIt</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>garroshh.jia@gmail.com (garroshh)</managingEditor><webMaster>garroshh.jia@gmail.com (garroshh)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 14 May 2020 15:28:57 +0800</lastBuildDate><atom:link href="https://garroshh.me/posts/" rel="self" type="application/rss+xml"/><item><title>服务治理</title><link>https://garroshh.me/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</link><pubDate>Wed, 13 May 2020 18:29:31 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</guid><description>为了使系统不出现单点故障，服务需要有多个实例增加冗余来提高高可用性，这就需要负载均衡技术；为了请求处理的高效性，又要求有会话保持功能；重试是</description></item><item><title>自定义 Gloo Proxy Controller</title><link>https://garroshh.me/%E8%87%AA%E5%AE%9A%E4%B9%89-gloo-proxy-controller/</link><pubDate>Thu, 14 May 2020 15:28:57 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E8%87%AA%E5%AE%9A%E4%B9%89-gloo-proxy-controller/</guid><description>使用 Gloo Proxy API 自动为存在的 kubernetes 服务创建路由器。 1. 为什么编写自定义代理控制器？ Building a Proxy controller allows you to add custom Gloo operational logic to your setup. In this example, we will write a proxy controller that creates and manages a second Gloo Proxy (my-cool-proxy) alongside the</description></item><item><title>Gloo Gloo 简介、功能和架构</title><link>https://garroshh.me/gloo-gloo-%E7%AE%80%E4%BB%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9E%B6%E6%9E%84/</link><pubDate>Thu, 14 May 2020 15:26:31 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-gloo-%E7%AE%80%E4%BB%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9E%B6%E6%9E%84/</guid><description>1. Gloo 简介 Gloo is a feature-rich, Kubernetes-native ingress controller, and next-generation API gateway. Gloo is uniquely designed to support hybrid applications, in which multiple technologies, architectures, protocols, and clouds can coexist. Gloo is exceptional in its function-level routing; its support for legacy apps, microservices and serverless; its discovery capabilities; its numerous features; its tight integration with leading open-source projects. 2. Gloo 功能 connect secure control All Workload</description></item><item><title>Gloo 分析</title><link>https://garroshh.me/gloo-%E5%88%86%E6%9E%90/</link><pubDate>Thu, 14 May 2020 15:21:56 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-%E5%88%86%E6%9E%90/</guid><description>以下为个人理解，仅供参考！ Gloo Envoy Upgrades As we ship an extended version of Envoy, it is very important for us to stay close to upstream Envoy. To achieve this, our repository structure and CI closely resembles those of Envoy. Envoy master branch is always considered RC quality. We therefore make sure frequently that Gloo can be built with the latest</description></item><item><title>Gloo Routing</title><link>https://garroshh.me/gloo-routing/</link><pubDate>Thu, 14 May 2020 14:32:33 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-routing/</guid><description>3个层：网关侦听器，虚拟服务和上游。通常，我们与虚拟服务进行交互，从而可以配置希望在网关上公开的API的详细信息以及如何路由到后端。 上游代表</description></item><item><title>实验总结</title><link>https://garroshh.me/%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 14 May 2020 14:13:46 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</guid><description>1. 环境准备 1.1. Kubernetes 搭建 1.2. Istio 部署 2. 流量监控 2.1. 预先准备：安装插件 2.2. 调用链跟踪 2.3. 指标监控 2.4. Grafana 2.5. 服务网格监控 3. 灰度发布 3.1. 预先准备：将所有流量路由到各服务</description></item><item><title>多集群管理</title><link>https://garroshh.me/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 14 May 2020 11:47:35 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</guid><description>在多个集群中部署和管理应用，能带来更好的故障隔离性和扩展性。Istio 的多集群模型主要分为两类：多控制面模型和单控制面模型。 由于多控制面模型</description></item><item><title>服务保护</title><link>https://garroshh.me/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/</link><pubDate>Thu, 14 May 2020 11:17:30 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/</guid><description>Istio 的安全功能十分强大，安全场景包括对网关的加密、服务间的访问控制、认证和授权。网关加密由 Ingress Gateway 实现，访问控制依赖 Mixer，认证和授权主要由 C</description></item><item><title>自动化灰度发布</title><link>https://garroshh.me/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 13 May 2020 18:21:35 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</guid><description>之前的灰度发布，包括策略配置和指标分析，都需要人工干预。在持续交付过程中，为了解决部署和管理的复杂性，需要通过自动化工具实现基于权重的灰度发</description></item><item><title>灰度发布</title><link>https://garroshh.me/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 13 May 2020 18:03:47 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</guid><description>1. 预先准备：将所有流量路由到各个服务 v1 版本 将 fronted，advertisement 和 forecast 服务的 v1 版本部署到集群中，命名空间是 weather</description></item></channel></rss>