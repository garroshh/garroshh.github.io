<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gloo - 标签 - LoveIt</title><link>https://garroshh.me/tags/gloo/</link><description>Gloo - 标签 - LoveIt</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>garroshh.jia@gmail.com (garroshh)</managingEditor><webMaster>garroshh.jia@gmail.com (garroshh)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 14 May 2020 15:28:57 +0800</lastBuildDate><atom:link href="https://garroshh.me/tags/gloo/" rel="self" type="application/rss+xml"/><item><title>自定义 Gloo Proxy Controller</title><link>https://garroshh.me/%E8%87%AA%E5%AE%9A%E4%B9%89-gloo-proxy-controller/</link><pubDate>Thu, 14 May 2020 15:28:57 +0800</pubDate><author>作者</author><guid>https://garroshh.me/%E8%87%AA%E5%AE%9A%E4%B9%89-gloo-proxy-controller/</guid><description>使用 Gloo Proxy API 自动为存在的 kubernetes 服务创建路由器。 1. 为什么编写自定义代理控制器？ Building a Proxy controller allows you to add custom Gloo operational logic to your setup. In this example, we will write a proxy controller that creates and manages a second Gloo Proxy (my-cool-proxy) alongside the</description></item><item><title>Gloo Gloo 简介、功能和架构</title><link>https://garroshh.me/gloo-gloo-%E7%AE%80%E4%BB%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9E%B6%E6%9E%84/</link><pubDate>Thu, 14 May 2020 15:26:31 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-gloo-%E7%AE%80%E4%BB%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9E%B6%E6%9E%84/</guid><description>1. Gloo 简介 Gloo is a feature-rich, Kubernetes-native ingress controller, and next-generation API gateway. Gloo is uniquely designed to support hybrid applications, in which multiple technologies, architectures, protocols, and clouds can coexist. Gloo is exceptional in its function-level routing; its support for legacy apps, microservices and serverless; its discovery capabilities; its numerous features; its tight integration with leading open-source projects. 2. Gloo 功能 connect secure control All Workload</description></item><item><title>Gloo 分析</title><link>https://garroshh.me/gloo-%E5%88%86%E6%9E%90/</link><pubDate>Thu, 14 May 2020 15:21:56 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-%E5%88%86%E6%9E%90/</guid><description>以下为个人理解，仅供参考！ Gloo Envoy Upgrades As we ship an extended version of Envoy, it is very important for us to stay close to upstream Envoy. To achieve this, our repository structure and CI closely resembles those of Envoy. Envoy master branch is always considered RC quality. We therefore make sure frequently that Gloo can be built with the latest</description></item><item><title>Gloo Routing</title><link>https://garroshh.me/gloo-routing/</link><pubDate>Thu, 14 May 2020 14:32:33 +0800</pubDate><author>作者</author><guid>https://garroshh.me/gloo-routing/</guid><description>3个层：网关侦听器，虚拟服务和上游。通常，我们与虚拟服务进行交互，从而可以配置希望在网关上公开的API的详细信息以及如何路由到后端。 上游代表</description></item></channel></rss>